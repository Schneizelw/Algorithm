//!LCS-LENGTH(X,Y)
/*
1   m = X.length;
2   n = Y.length;
3   let b[1..m,1..n] and c[0..m,0..n] be new table
4   for i = 1 to n
5       c[i,0] = 0
6   for j= 0 to n
7       c[0,j] = 0
8   for i = 1 to m
9       for j = 1 to n
10          if xi==yj
11              c[i,j] = c[i-1][j-1] + 1
12              b[i,j] = 1  //表示指向左上的箭头
13          elseif c[i-1,j] >= c[i,j-1]
14              c[i,j]= c[i-1,j]
15              b[i,j] = 2  //表示指向上的箭头
16          else c[i,j]=c[i,j-1]
17              b[i,j] = 0  //表示指向左的箭头
18   return c and b
*/

//! PRINT-LCS(b,X,i,j)
/*
1   if i==0 or j==0
2       return
3   if b[i,j] == 1
4       PRINT-LCS(b,X,i-1,j-1)
5       print xi
6   elseif b[i,j] = 2
7       PRINT-LCS(b,X,i-1,j)
8   else PRINT-LCS(b,X,i,j-1)
*/

#include<iostream>
#include<vector>

using namespace std;

vector<vector<int>> LCS_LENGTH(vector<char> X,vector<char> Y)
{
    int m = X.size();
    int n = Y.size();
    //c[i][j] 表示 X[0...i]和Y[0...j]的最长公共子序列长度
    //b[i][j] 表示 c[i][j]的解是由哪种情况得到的。
    vector<vector<int>> b,c;
    b.resize(m+1);
    c.resize(m+1);
    for(int i=0;i<=m;++i){
        b[i].resize(n+1);
        c[i].resize(n+1);
    }

    for(int i=1;i<=m;++i) c[i][0]= 0;
    for(int j=0;j<=n;++j) c[0][j]= 0;

    for(int i=1;i<=m;++i){
        for(int j=1;j<=n;++j){
            //由于XY并不是从1开始 而是从0开始 所以需要i-1
            if(X[i-1]==Y[j-1]){ 
                //第一个字符相等
                c[i][j] = c[i-1][j-1] +1;
                b[i][j] = 1;
            }
            else if(c[i-1][j]>=c[i][j-1]){
                //X[0...i-1]和Y[0...j]得到的最长公共子序列比X[0...i]和Y[0...j-1]要长
                c[i][j] = c[i-1][j];
                b[i][j] = 2;
            }
            else{
                //X[0...i]和Y[0...j-1]得到的最长公共子序列比X[0...i-1]和Y[0...j]要长
                c[i][j] = c[i][j-1];
                b[i][j] = 0;
            }
        }
    }
    return b;
}

int PRINT_LCS(vector<vector<int>> b,vector<char> X,int i,int j)
{
    if(i==0 || j==0) return 0;

    if(b[i][j]==1){
        PRINT_LCS(b,X,i-1,j-1);
        cout << X[i-1];//主要与伪代码的不同
    }
    else if(b[i][j]==2)
        PRINT_LCS(b,X,i-1,j);
    else
        PRINT_LCS(b,X,i,j-1);
}



int main()
{
    vector<char> X = {'A','B','C','B','D','A','B'};
    vector<char> Y = {'B','D','C','A','B','A'};
    auto b = LCS_LENGTH(X,Y);

    for(int i=0;i<=X.size();++i){
       for(int j=0;j<=Y.size();++j){
            cout <<"   "<< b[i][j];
        }
        cout << endl;
    }
    PRINT_LCS(b,X,X.size(),Y.size());

}
