#include<iostream>
#include<vector>
#include<iomanip>
using namespace std;

void Knapsack_problem( vector<pair<int,int>> &available,int capacity)
{
    int sz = available.size();//物品的个数加1 因为参数available的第0索引不适用

    //value[i][j]表示当是背包容量为j，物品可选择前i个的时候可以取走的最大价值
    vector<vector<int>> value;
    value.resize(sz);
    for(int i=0;i<sz;++i) value[i].resize(capacity+1);

    //i表示可以取走available数组第1~i个物品。
    for(int i=1;i<sz;++i){
        //j为当前容量 从1到最大背包容量遍历
        for(int j=1;j<=capacity;++j){
            if(available[i].second<=j){//能装进去
                //取i之前的物品得到的最大价值
                int a = value[i-1][j];
                //取了当前第i个物品所能得到的最大价值
                int b = value[i-1][j-available[i].second]+available[i].first;
                                //^^^^^^^^^^^^^^^^^^^^^^去了第i个物品的剩余空间
                //取较大者
                value[i][j] = a>b ? a:b;
            }else if(available[i].second>j){//不能装进去
                
                value[i][j] = value[i-1][j];//去i之前的物品得到的最大价值
            }
        }//for
    }//for
    
    //打印表格
    for(int i=0;i<sz;++i)
    {
        for(int j=0;j<=capacity;++j)
        {
            cout <<setw(5) << value[i][j];
        }
        cout << endl;
    }
    cout <<"answer:" <<value[sz-1][capacity] <<endl;
}


int main()
{   //<int,int>为价格 重量。 按"价值"递增排序。
    vector<pair<int,int>> available = {{0,0},{3,2},{4,3},{5,4},{6,5}};

    Knapsack_problem(available,8);
}
