/*递归式
假设：str为要被找出最长子回文序列的字符串
      e[i,j] 存放str中str[i]到str[j]表示最长子回文序列

则   e[i,j] = { str[i] + e[i+1][j-1] + str[j] (if str[i]==str[j])
              { max_size(e[i+1][j],e[i][j-1]) (if str[i]!=str[j])
*/

#include<iostream>
#include<vector>
#include<string>
#include<iomanip>
using namespace std;

void max_sub_palindrome(string str)
{
     int len = str.length();
    str = " " + str;//因为处理从下表为1开始 即不用0下表
    vector<vector<string>> e;
    e.resize(len+1);
    for(int i=0;i<=len;++i){
        e[i].resize(len+1);
    }
    //初始化i==j的最长子回文
    for(int i=1;i<=len;++i){
        e[i][i] = str[i];
    }

    for(int l=2;l<=len;++l){   //l为被检车str子串的长度
        for(int i=1;i<=len-l+1;++i){  //i为str子串的起始索引下标
            int j = i+l-1;            //j为str子串的结束索引小标
            //递归式处理
            if(str[i]==str[j] && i+1<=j-1){
                e[i][j] = str[i] + e[i+1][j-1] + str[j];
            }
            else if(str[i]==str[j] && i+1>j-1){
                                  //^^^^^^^^^^ 特殊情况即str子串偶数时且左右(如aa,aeea)
                                  // 相等会出现i+1>j-1的情况
                e[i][j] = str[i] + str[j];
            }
            else{
                if(e[i+1][j].length()>=e[i][j-1].length()){
                    e[i][j] = e[i+1][j];
                }
                else{
                    e[i][j] = e[i][j-1];
                }//else
            }//else
        }//for
    }//for
    //打印结果
    for(int i=1;i<=len;++i){
        for(int j=1;j<=len;++j)
            cout <<setw(8) <<e[i][j];
        cout << endl;
    }
    cout << e[1][len]<<endl;

}

int main()
{
    string str = "character";
    max_sub_palindrome(str);
}
